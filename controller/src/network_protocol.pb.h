/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2-dev */

#ifndef PB_NETWORK_PROTOCOL_PB_H_INCLUDED
#define PB_NETWORK_PROTOCOL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ControllerMsgType {
    ControllerMsgType_ACK = 16,
    ControllerMsgType_ERR_CHECK_SUM = 17,
    ControllerMsgType_ERR_MODE = 18,
    ControllerMsgType_ERR_CMD = 19,
    ControllerMsgType_STATUS = 32,
    ControllerMsgType_ALARM = 48,
    ControllerMsgType_DATA = 64
} ControllerMsgType;

typedef enum _CommandType {
    CommandType_SET_RR = 0,
    CommandType_GET_RR = 1,
    CommandType_SET_TV = 2,
    CommandType_GET_TV = 3,
    CommandType_SET_PEEP = 4,
    CommandType_GET_PEEP = 5,
    CommandType_SET_PIP = 6,
    CommandType_GET_PIP = 7,
    CommandType_SET_DWELL = 8,
    CommandType_GET_DWELL = 9,
    CommandType_SET_IR = 10,
    CommandType_GET_IR = 11,
    CommandType_GET_PRESSURE = 12,
    CommandType_GET_FLOW = 13,
    CommandType_GET_VOLUME = 14,
    CommandType_SET_KP = 32,
    CommandType_GET_KP = 33,
    CommandType_SET_KI = 34,
    CommandType_GET_KI = 35,
    CommandType_SET_KD = 36,
    CommandType_GET_KD = 37,
    CommandType_SET_BLOWER = 38,
    CommandType_RESET = 39,
    CommandType_SET_SOLENOID = 40,
    CommandType_SET_TX_RATE = 64,
    CommandType_GET_TX_RATE = 65,
    CommandType_SET_CONTROLLER_MODE = 66,
    CommandType_GET_CONTROLLER_MODE = 67,
    CommandType_COMM_CHECK = 68,
    CommandType_SET_VENTILATOR_MODE = 69,
    CommandType_GET_VENTILATOR_MODE = 70,
    CommandType_START_VENTILATOR = 71,
    CommandType_STOP_VENTILATOR = 72
} CommandType;

/* Struct definitions */
typedef struct _CommandPacket {
    CommandType cmd;
    bool has_data;
    uint32_t data;
    uint32_t checksum;
} CommandPacket;

typedef struct _ControllerDataPacket {
    ControllerMsgType msg_type;
    uint32_t data_id;
    pb_callback_t data;
    uint32_t checksum;
} ControllerDataPacket;

typedef struct _GuiAckPacket {
    uint32_t type;
    uint32_t checksum;
} GuiAckPacket;

typedef struct _Packet {
    pb_size_t which_payload;
    union {
        CommandPacket cmd;
        GuiAckPacket gui_ack;
        ControllerDataPacket data;
    } payload;
} Packet;


/* Helper constants for enums */
#define _ControllerMsgType_MIN ControllerMsgType_ACK
#define _ControllerMsgType_MAX ControllerMsgType_DATA
#define _ControllerMsgType_ARRAYSIZE ((ControllerMsgType)(ControllerMsgType_DATA+1))

#define _CommandType_MIN CommandType_SET_RR
#define _CommandType_MAX CommandType_STOP_VENTILATOR
#define _CommandType_ARRAYSIZE ((CommandType)(CommandType_STOP_VENTILATOR+1))


/* Initializer values for message structs */
#define CommandPacket_init_default               {_CommandType_MIN, false, 0, 0}
#define GuiAckPacket_init_default                {0, 0}
#define ControllerDataPacket_init_default        {_ControllerMsgType_MIN, 0, {{NULL}, NULL}, 0}
#define Packet_init_default                      {0, {CommandPacket_init_default}}
#define CommandPacket_init_zero                  {_CommandType_MIN, false, 0, 0}
#define GuiAckPacket_init_zero                   {0, 0}
#define ControllerDataPacket_init_zero           {_ControllerMsgType_MIN, 0, {{NULL}, NULL}, 0}
#define Packet_init_zero                         {0, {CommandPacket_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define CommandPacket_cmd_tag                    1
#define CommandPacket_data_tag                   2
#define CommandPacket_checksum_tag               3
#define ControllerDataPacket_msg_type_tag        1
#define ControllerDataPacket_data_id_tag         2
#define ControllerDataPacket_data_tag            3
#define ControllerDataPacket_checksum_tag        4
#define GuiAckPacket_type_tag                    1
#define GuiAckPacket_checksum_tag                2
#define Packet_cmd_tag                           1
#define Packet_gui_ack_tag                       2
#define Packet_data_tag                          3

/* Struct field encoding specification for nanopb */
#define CommandPacket_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    cmd,               1) \
X(a, STATIC,   OPTIONAL, UINT32,   data,              2) \
X(a, STATIC,   REQUIRED, UINT32,   checksum,          3)
#define CommandPacket_CALLBACK NULL
#define CommandPacket_DEFAULT NULL

#define GuiAckPacket_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   type,              1) \
X(a, STATIC,   REQUIRED, UINT32,   checksum,          2)
#define GuiAckPacket_CALLBACK NULL
#define GuiAckPacket_DEFAULT NULL

#define ControllerDataPacket_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    msg_type,          1) \
X(a, STATIC,   REQUIRED, UINT32,   data_id,           2) \
X(a, CALLBACK, REQUIRED, BYTES,    data,              3) \
X(a, STATIC,   REQUIRED, UINT32,   checksum,          4)
#define ControllerDataPacket_CALLBACK pb_default_field_callback
#define ControllerDataPacket_DEFAULT NULL

#define Packet_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,cmd,payload.cmd),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,gui_ack,payload.gui_ack),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,data,payload.data),   3)
#define Packet_CALLBACK NULL
#define Packet_DEFAULT NULL
#define Packet_payload_cmd_MSGTYPE CommandPacket
#define Packet_payload_gui_ack_MSGTYPE GuiAckPacket
#define Packet_payload_data_MSGTYPE ControllerDataPacket

extern const pb_msgdesc_t CommandPacket_msg;
extern const pb_msgdesc_t GuiAckPacket_msg;
extern const pb_msgdesc_t ControllerDataPacket_msg;
extern const pb_msgdesc_t Packet_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CommandPacket_fields &CommandPacket_msg
#define GuiAckPacket_fields &GuiAckPacket_msg
#define ControllerDataPacket_fields &ControllerDataPacket_msg
#define Packet_fields &Packet_msg

/* Maximum encoded size of messages (where known) */
#define CommandPacket_size                       14
#define GuiAckPacket_size                        12
/* ControllerDataPacket_size depends on runtime parameters */
/* Packet_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
